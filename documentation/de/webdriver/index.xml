<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebDriver on Dokumentation für Selenium</title><link>https://www.selenium.dev/documentation/de/webdriver/</link><description>Recent content in WebDriver on Dokumentation für Selenium</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/de/webdriver/index.xml" rel="self" type="application/rss+xml"/><item><title>Erklärung der Komponenten</title><link>https://www.selenium.dev/documentation/de/webdriver/understanding_the_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/understanding_the_components/</guid><description>Um eine Testsuite mit Hilfe des WebDrivers zu erstellen, ist es notwendig verschiedeneste Komponenten des WebDrivers zu verstehen und richtig einzusetzten. Wie bei fast allen in der Softwareentwicklung, gibt es viele Lösungsmöglichkeiten um eine Idee umzusetzten. Folgend ein paar Begriffsdefinitionen die in der Beschreibung genutzt werden.
Begriffsdefinitionen API: Application Programming Interface (= Programmschnittstelle). Beschreibt eine Sammlung von Kommandos, die verwendet werden um den WebDriver zu konfigurieren. Bibliothek: (= Libary) Ein Modul welches die APIs und den erforderlichen Programmcode beinhaltet, der notwendig ist für die Implementierung der Schnittstellen.</description></item><item><title>Driver Vorraussetzungen</title><link>https://www.selenium.dev/documentation/de/webdriver/driver_requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/driver_requirements/</guid><description>Mit Hilfe des WebDrivers unterstützt Selenium alle wichtigen Webbrowser wie Chrom(ium), Firefox, Internet Explorer, Opera und Safari. Wenn möglich wird der Browser mit Hilfe des integrierten Support für Automation gesteuert, nicht für alle Browser existiert diese Möglichkeit der externe Steuerung.
Das Ziel von WebDriver ist es Interaktionen eines echten Benutzers so gut wie möglich mit dem Browser zu simulieren. Die unterschiedlichen Browser unterstützen dies in unterschiedlicher Weise. Mehr Details zu den unterschiedlichen Eigenheiten der Driver sind unter Eigenheiten der Driver zu finden.</description></item><item><title>Browser Manipulation</title><link>https://www.selenium.dev/documentation/de/webdriver/browser_manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/browser_manipulation/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check where you need to check the Add Ruby executables to your PATH checkbox.</description></item><item><title>Waits</title><link>https://www.selenium.dev/documentation/de/webdriver/waits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/waits/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver does not track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description></item><item><title>Support classes</title><link>https://www.selenium.dev/documentation/de/webdriver/support_classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/support_classes/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
WebDriver support classes are provided to simplify maintaining your code. They provide a nice abstraction to make modeling HTML element(s) as domain objects easier, also providing helper methods to make using such objects easy to reason about. We will learn about:
Locator Strategies Events LoadableComponent ThreadGuard etc.</description></item><item><title>JavaScript-Warnungen, Fragen und Bestätigungen</title><link>https://www.selenium.dev/documentation/de/webdriver/js_alerts_prompts_and_confirmations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/js_alerts_prompts_and_confirmations/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
WebDriver provides an API for working with the three types of native popup messages offered by JavaScript. These popups are styled by the browser and offer limited customisation.
Alerts The simplest of these is referred to as an alert, which shows a custom message, and a single button which dismisses the alert, labelled in most browsers as OK.</description></item><item><title>Http proxies</title><link>https://www.selenium.dev/documentation/de/webdriver/http_proxies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/http_proxies/</guid><description>A proxy server acts as an intermediary for requests between a client and a server. In simple, the traffic flows through the proxy server on its way to the address you requested and back.
A proxy server for automation scripts with Selenium could be helpful for:
Capture network traffic Mock backend calls made by the website Access the required website under complex network topologies or strict corporate restrictions/policies. If you are in a corporate environment, and a browser fails to connect to a URL, this is most likely because the environment needs a proxy to be accessed.</description></item><item><title>Strategien beim Laden von Webseiten</title><link>https://www.selenium.dev/documentation/de/webdriver/page_loading_strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/page_loading_strategy/</guid><description>Defines the current session&amp;rsquo;s page loading strategy. By default, when Selenium WebDriver loads a page, it follows the normal pageLoadStrategy. It is always recommended to stop downloading additional resources (like images, css, js) when the page loading takes lot of time.
The document.readyState property of a document describes the loading state of the current document. By default, WebDriver will hold off on responding to a driver.get() (or) driver.navigate().to() call until the document ready state is complete</description></item><item><title>Webelement</title><link>https://www.selenium.dev/documentation/de/webdriver/web_element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/web_element/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
WebElement represents a DOM element. WebElements can be found by searching from the document root using a WebDriver instance, or by searching under another WebElement.
WebDriver API provides built-in methods to find the WebElements which are based on different properties like ID, Name, Class, XPath, CSS Selectors, link Text, etc.</description></item><item><title>Tastatur</title><link>https://www.selenium.dev/documentation/de/webdriver/keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/webdriver/keyboard/</guid><description>Diese Seite wird von Englisch auf Deutsch übersetzt. Sprichst Du Deutsch? Hilf uns die Seite zu übersetzen indem Du uns einen Pull Reqeust schickst!
Keyboard represents a KeyBoard event. KeyBoard actions are performed by using low-level interface which allows us to provide virtualized device input to the web browser.
sendKeys The sendKeys types a key sequence in DOM element even if modifier key sequence is encountered. Here are the list of possible keystrokes that WebDriver Supports.</description></item></channel></rss>